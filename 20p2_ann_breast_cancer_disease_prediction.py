# -*- coding: utf-8 -*-
"""20P2-ANN-breast cancer disease prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MYL64E8X4p5QpIi3FV5SeZ3Y2QPtwiyo
"""

import pandas as pd

df = pd.read_csv('breast_cancer.csv')
df.sample(3)

df.info()

df.isnull().sum()

df = df.drop(['id'], axis = 1)
df.tail(3)

df = df.iloc[:, :-1]
df.sample(3)

x = df.drop(['diagnosis'], axis = 1)
y = df['diagnosis']

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 42)

x.shape, y.shape, x_train.shape, y_train.shape, x_test.shape, y_test.shape

from sklearn.linear_model import LogisticRegression

model = LogisticRegression(max_iter = 2990)
model.fit(x_train, y_train)

y_pred = model.predict(x_test)
y_pred

from sklearn.metrics import classification_report

print(classification_report(y_test, y_pred))

from sklearn.feature_selection import RFE

model1 = LogisticRegression(max_iter = 2990)
rfe = RFE(model1, n_features_to_select = 10, verbose = 1)
rfe.fit(x_train, y_train)

rfe.support_
selected_cols = x_train.columns[rfe.support_]
selected_cols

model1.fit(x_train[selected_cols], y_train)
print(f'{model1.score(x_test[selected_cols], y_test) *100:.3f} %')

def find_best_feature(n):
    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 42)
    model1 = LogisticRegression(max_iter = 3500)
    rfe = RFE(estimator = model1, n_features_to_select = n, verbose = 1)
    rfe.fit(x_train, y_train)
    selected_col = x_train.columns[rfe.support_]

    model1.fit(x_train[selected_col], y_train)
    score = model1.score(x_test[selected_col], y_test)
    print('Selected Columns:', list(selected_col))
    print(f'Score: {score * 100:.3f} %')
    print(f'n: {n}')
    print('-' * 50)

for i in range(1, x.shape[1] + 1):
    print(f'{i})')
    find_best_feature(i)

Selected_Columns =  ['radius_mean', 'compactness_mean', 'concavity_mean', 'concave points_mean', 'texture_se', 'perimeter_se', 'radius_worst', 'smoothness_worst', 'compactness_worst', 'concavity_worst', 'concave points_worst', 'symmetry_worst']

x = df[Selected_Columns]
y = df['diagnosis']

y = y.replace({'M': 1, 'B': 0}).astype('float32')

type(x)

type(y)

x_test, x_train, y_test, y_train = train_test_split(x, y, test_size = 0.2, random_state = 42)

import tensorflow as tf
import keras
from keras.models import Sequential
from keras.layers import Dense, Dropout

input_shape = x_train.shape[1:]
input_shape

model = Sequential()
model.add(Dense(activation = 'relu', units = 12, input_dim = 12, kernel_initializer = 'uniform'))
model.add(Dense(activation = 'relu', units = 12, kernel_initializer = 'uniform'))
model.add(Dense(activation = 'sigmoid', units = 1, kernel_initializer = 'uniform'))

model.summary()

model.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])
history = model.fit(x_train, y_train, batch_size = 5, epochs = 10, validation_split = 0.2)

x_cols = x.columns

for i in x_cols:
  print(i, type(i))

print(x.dtypes)

print(type(y_train))
print(y_train.dtypes)
print(y_train.head())

model

ann_y_pred = model.predict(x_test)
ann_y_pred

ann_y_pred = (ann_y_pred > 0.5).astype(int)

print(classification_report(y_test, ann_y_pred))

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
x = scaler.fit_transform(x)

x_test, x_train, y_test, y_train = train_test_split(x, y, test_size = 0.2, random_state = 42)

model = Sequential()
model.add(Dense(activation = 'relu', units = 12, input_dim = 12, kernel_initializer = 'he_uniform'))
model.add(Dropout(0.3))
model.add(Dense(activation = 'relu', units = 12, kernel_initializer = 'he_uniform'))
model.add(Dropout(0.3))
model.add(Dense(activation = 'sigmoid', units = 1, kernel_initializer = 'he_uniform'))

model.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

from keras.callbacks import EarlyStopping
early_stop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)

history = model.fit(x_train, y_train, epochs=50, batch_size=10, validation_split=0.2, callbacks=[early_stop])

y_pred = model.predict(x_test)

ann_y___pred = (ann_y_pred > 0.5).astype(int)

print(classification_report(y_test, ann_y_pred))

model, scaler

saved_model = model.save("breast_cancer_ann_model.keras")

import pickle

# Save the fitted scaler
with open("scaler.pkl", "wb") as f:
    pickle.dump(scaler, f)